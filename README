--------------------------- COMO MONTAR O PROJETO DA API ---------------------------
cd raiz-do-projeto
composer install

--------------------------- COMO CONSUMIR A API ---------------------------

ATENÇÃO - Todas as requisições (urls) com exceção do POST para /usuario necessitam de enviar o token de autorização
no cabeçalho da requisição, Exemplo:
Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJsb2NhbGhvc3Q6ODA4MiIsImF1ZCI6ImxvY2FsaG9zdDo4MDgyXC9zaWdvcmdcL3dlYiIsImlhdCI6MTQ5NzI4ODAxMCwibmJmIjoxNDk3Mjg4MDEwLCJ1aWQiOjMsInV0eXBlIjoiUk9MRV9VU1VBUklPIn0.s3bwPjT28_K-37ChpPM0p2lucljHa9tgofxLKFkTJPQ

Você pode fazer uma requisição POST para /usuario com os atributos login e senha para cadastrar um usuário novo
e em seguida uma requisição POST para /autenticar com este login e senha cadastrados e a API retornará
o próprio usuário como corpo da resposta e o Header Authorization para usar nas requisições seguintes

Ao fazer a requisição e enviar as informações que não sejam pela url (querystring) pelos métodos GET POST PUT
lembar de por esta informação no cabeçalho do request
     º Content-Type: application/x-www-form-urlencoded

O status do response esperado para cada método
GET    200  OK
DELETE 204  NO CONTENT
PUT    204  NO CONTENT
POST   201  CREATED

--------------------------- ROTAS DA API ---------------------------

Usuário
    GET    http://url-do-projeto/usuario/{indice}
    GET    http://url-do-projeto/usuario?login=mikhail
    DELETE http://url-do-projeto/usuario/{indice}
    POST   http://url-do-projeto/usuario
        atributos {login: "string", senha:"string"}
    PUT   http://url-do-projeto/usuario/{indice}
        atributos {login: "string", senha:"string"}

Acessório
    * Olhar os valores de tipos possíveis nas constantes da classe N2oti\Api\Entidade\AcessorioEntidade
    GET    http://url-do-projeto/acessorio/{indice}
    GET    http://url-do-projeto/acessorio?tipo=1
    GET    http://url-do-projeto/acessorio?tipo=farol%20alteza
    DELETE http://url-do-projeto/acessorio/{indice}
    POST   http://url-do-projeto/acessorio
        atributos {nome: "string", tipo:"inteiro"}
    PUT   http://url-do-projeto/acessorio/{indice}
        atributos {nome: "string", tipo:"inteiro"}

Modelo
    GET    http://url-do-projeto/modelo/{indice}
    GET    http://url-do-projeto/modelo?aro=14
    GET    http://url-do-projeto/modelo?nome=Civic
    GET    http://url-do-projeto/modelo?nome=Civic&ano=2017
    DELETE http://url-do-projeto/modelo/{indice}
    POST   http://url-do-projeto/modelo
        atributos {nome: "string", ano:"inteiro", aro: inteiro, acessorios: array([0] => array('id' => 1)}
        exemplo com acessórios
            nome=New Civic&aro=22&ano=2017&acessorios[][id]=1&acessorios[][id]=2
    PUT   http://url-do-projeto/modelo/{indice}
        atributos {nome: "string", ano:"inteiro", aro: inteiro, acessorios: array([0] => array('id' => 1)}
        exemplo com acessórios
            nome=New Civic&aro=22&ano=2017&acessorios[][id]=1&acessorios[][id]=2

--------------------------- BANCO DE DADOS ---------------------------

Criar o banco - Se executar sem o parâmetro --dump-sql o doctrine executa o script no banco
    cd raiz-do-projeto
    ./vendor/bin/doctrine orm:schema-tool:create --dump-sql

Atualizar o banco - Se executar com o parâmetro --force o doctrine executa o script no banco
    cd raiz-do-projeto
    ./vendor/bin/doctrine orm:schema-tool:update --dump-sql